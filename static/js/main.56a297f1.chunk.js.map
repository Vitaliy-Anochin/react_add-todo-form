{"version":3,"sources":["components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","api/users.ts","api/todos.ts","App.tsx","index.tsx"],"names":["UserInfo","user","className","href","email","name","TodoInfo","todo","id","classNames","completed","title","TodoList","prepared","map","username","userId","preparedTodos","todosFromServer","usersFromServer","find","maxTodoId","sort","el1","el2","App","useState","setTitle","setUser","errorUser","setErrorUser","errorTitle","setErrorTitle","handleChange","event","target","value","onSubmit","preventDefault","userName","newTodo","push","addTodo","type","placeholder","onChange","item","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.56a297f1.chunk.js","sourcesContent":["import { User } from '../types/User';\n\ntype Props = {\n  user: User;\n};\nexport const UserInfo: React.FC<Props> = ({ user }) => (\n  <>\n    {user && (\n      <a\n        className=\"UserInfo\"\n        href={`mailto: ${user.email}`}\n      >\n        {user.name}\n      </a>\n    )}\n  </>\n);\n","import classNames from 'classnames';\n\nimport { PreparedTodo } from '../types/preparedTodo';\nimport { UserInfo } from '../UserInfo';\n\ntype Props = {\n  todo: PreparedTodo;\n};\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => {\n  return (\n    <article\n      data-id={todo.id}\n      className={classNames(\n        'TodoInfo',\n        { 'TodoInfo--completed': todo.completed },\n      )}\n    >\n      <h2 className=\"TodoInfo__title\">\n        {todo.title}\n      </h2>\n\n      {todo.user && (\n        <UserInfo user={todo.user} />\n      )}\n\n    </article>\n  );\n};\n","import { TodoInfo } from '../TodoInfo';\n\nimport { PreparedTodo } from '../types/preparedTodo';\n\ntype Props = {\n  prepared: PreparedTodo[];\n};\nexport const TodoList: React.FC<Props> = ({ prepared }) => (\n  <section className=\"TodoList\">\n    {prepared.map(todo => (\n      <TodoInfo todo={todo} key={todo.id} />\n    ))}\n  </section>\n);\n","export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import React, { useState } from 'react';\nimport './App.scss';\n\nimport { TodoList } from './components/TodoList/TodoList';\nimport { PreparedTodo } from './components/types/preparedTodo';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\n\nconst preparedTodos: PreparedTodo[] = todosFromServer.map(todo => {\n  return {\n    ...todo,\n    user: usersFromServer.find(user => user.id === todo.userId),\n  };\n});\n\nlet maxTodoId = [...todosFromServer].sort((el1, el2) => (\n  el2.id - el1.id))[0].id;\n\nconst addTodo = (title: string, userName: string) => {\n  maxTodoId += 1;\n\n  const newTodo = {\n    id: maxTodoId,\n    title,\n    completed: false,\n    userId: 1,\n    user: usersFromServer.find(user => user.name === userName),\n  };\n\n  preparedTodos.push(newTodo);\n};\n\nexport const App = () => {\n  const [title, setTitle] = useState('');\n  const [user, setUser] = useState('');\n  const [errorUser, setErrorUser] = useState(false);\n  const [errorTitle, setErrorTitle] = useState(false);\n\n  const handleChange = (\n    event: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>,\n  ) => {\n    const { name, value } = event.target;\n\n    if (name === 'title') {\n      setTitle(value);\n    } else {\n      setUser(value);\n    }\n  };\n\n  const submit = (event: { preventDefault: () => void; }) => {\n    event.preventDefault();\n    if (!title || !user) {\n      if (!title) {\n        setErrorTitle(true);\n      }\n\n      if (!user) {\n        setErrorUser(true);\n      }\n\n      return;\n    }\n\n    addTodo(title, user);\n    setTitle('');\n    setUser('');\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        onSubmit={submit}\n      >\n        <div className=\"field\">\n          <input\n            type=\"text\"\n            data-cy=\"titleInput\"\n            name=\"title\"\n            value={title}\n            placeholder=\"Enter the title\"\n            onChange={handleChange}\n          />\n          {errorTitle && (\n            <span className=\"error\">\n              Please enter a title\n            </span>\n          )}\n        </div>\n\n        <div className=\"field\">\n          <select\n            name=\"user\"\n            data-cy=\"userSelect\"\n            onChange={handleChange}\n            value={user}\n          >\n            <option\n              value=\"\"\n            >\n              Choose a user\n            </option>\n            {usersFromServer.map(item => (\n              <option\n                value={item.name}\n                key={item.id}\n              >\n                {item.name}\n              </option>\n            ))}\n          </select>\n          {errorUser && (\n            <span className=\"error\">\n              Please choose a user\n            </span>\n          )}\n        </div>\n\n        <button\n          type=\"submit\"\n          data-cy=\"submitButton\"\n          className=\"button\"\n        >\n          Add\n        </button>\n      </form>\n\n      <TodoList prepared={preparedTodos} />\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}